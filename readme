# Proyecto CINF104 - Clasificación de GRD en Pacientes Hospital El Pino 🏥

Este repositorio corresponde al desarrollo del **Proyecto 1** de la asignatura *Aprendizaje de Máquinas (CINF104)*. El objetivo principal es predecir el grupo relacionado de diagnóstico (**GRD**) de un paciente en base a su información clínica, utilizando distintos modelos de clasificación.

---

## 🧱 Arquitectura del Proyecto

📂 raíz_del_proyecto/  
│  
├── 📂 data/                          # Datos originales del hospital  
│   ├── CIE-9.xlsx                   # Códigos de procedimientos médicos  
│   ├── CIE-10.xlsx                  # Códigos de diagnósticos médicos  
│   ├── dataset_elpino.csv          # Dataset clínico principal  
│   └── Tablas maestras bases GRD.xlsx  # Tabla de referencia para GRDs  
│  
├── 📂 modelos/                      # Modelos entrenados en formato .pkl  
├── 📂 imagenes/                     # Matrices de confusión generadas por los modelos  
├── 📂 resultados/                   # Resultados de predicciones y comparaciones  
│  
├── 🐍 codigo.py                     # Script de preprocesamiento completo  
│                                   # - Limpieza, codificación, balanceo  
│                                   # - Exporta nuevo_dataset  
│  
├── 🐍 graficos.py                   # Exploración visual del dataset  
│                                   # - Gráficos de distribución, correlación, boxplots, etc.  
│  
├── 🐍 modelos_prueba.py             # Entrena 4 modelos (RF, DT, XGB, MLP)  
│                                   # - Calcula métricas y genera matrices de confusión  
│  
├── 🐍 entrenar_xgboost.py           # Entrena específicamente un modelo XGBoost  
│                                   # - Guarda el modelo y el codificador  
│  
├── 🐍 prueba_xgboost.py             # Evalúa el modelo XGBoost entrenado  
│                                   # - Muestra métricas y predicciones generales  
│  
├── 🐍 xgboost_decode.py             # Realiza predicciones individuales con decodificación  
│                                   # - Muestra el GRD real, predicho, descripciones y si coincide  
│  
│                                    
├── 📄 readme                        # Este archivo  
├── 📄 requirements.txt              # Lista de dependencias  

---

## 📁 Archivos principales del proyecto

### `codigo.py`
Prepara los datos para modelar. Incluye:

- Limpieza y eliminación de columnas con muchos valores nulos.
- Conversión de variables categóricas como sexo, diagnósticos y procedimientos a valores numéricos.
- Mapeo de los GRDs desde el código al identificador numérico usando la tabla maestra.
- Balanceo del dataset usando **RandomOverSampler**.
- Exporta un DataFrame llamado `nuevo_dataset`, junto con variables útiles como `y`, `num_cols`, etc.

---

### `graficos.py`
Genera gráficos exploratorios que permiten visualizar:

- Distribución de GRDs antes y después del balanceo.
- Correlaciones entre variables numéricas.
- Distribución por sexo.
- Histogramas y boxplots de variables clínicas relevantes.
- Remapeo visual de GRDs frecuentes con más de 100 casos.

📂 Todos los gráficos se almacenan en la carpeta `/Graficos`.

---

### `modelos_prueba.py`
Este script entrena y compara distintos modelos:

- 🌲 Random Forest  
- 🌳 Árbol de Decisión  
- 🚀 XGBoost  
- 🧠 Red Neuronal (MLPClassifier)  

Para cada modelo:

- Se muestran métricas: Accuracy, Precisión, Recall, F1 Score, MAE, MSE.
- Se genera una **matriz de confusión** visual en `/imagenes`.
- El modelo se guarda en `/modelos`.

---

### `entrenar_xgboost.py`
Entrena de forma especializada el modelo **XGBoost**, utilizando:

- Etiquetas codificadas con `LabelEncoder`
- Datos ya preprocesados con `codigo.py`

🔁 Guarda el modelo y el codificador en:  
📍 `modelos/xgboost_entrenado.pkl`

---

### `prueba_xgboost.py`
Evalúa el modelo entrenado de XGBoost con el conjunto de test:

- Genera predicciones
- Imprime métricas detalladas de rendimiento
- Opcionalmente, guarda las predicciones en un `.csv` para análisis posterior

---

### `xgboost_decode.py`
Este script realiza una **comparación de predicciones individuales**:

- Muestra GRD real, GRD predicho y sus respectivas descripciones
- Indica si la predicción fue correcta ✅ o incorrecta ❌
- Mapea correctamente los ID con la tabla maestra
- Guarda los resultados en `/resultados/comparacion_grd.xlsx`

---

## ⚙️ Cómo ejecutar el proyecto

### 1. Requisitos

Asegúrate de tener Python 3.10 o superior instalado.  
Instala las dependencias usando:

```bash
pip install -r requirements.txt


 ## 2. Flujo de ejecución recomendado
python codigo.py               # Prepara el nuevo_dataset
python graficos.py             # Genera los gráficos
python modelos_prueba.py       # Entrena todos los modelos y guarda .pkl
python entrenar_xgboost.py     # Entrena y guarda modelo XGBoost
python prueba_xgboost.py       # Evalúa rendimiento de XGBoost
python xgboost_decode.py       # Compara predicciones individuales (GRD)
